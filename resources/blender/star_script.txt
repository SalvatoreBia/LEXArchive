import bpy
import sys

argv = sys.argv

if '--' not in argv:
    raise ValueError('Error: invalid syntax.')

split_index = argv.index('--')
argv = argv[split_index + 1:]

if '--' not in argv:
    raise ValueError('Error: missing file id.')

split_index = argv.index('--')
color_arg = argv[:split_index]
file_id = argv[split_index + 1]

SURFACE_COLOR = [float(val) for val in color_arg]
print(SURFACE_COLOR)

# Clear existing objects
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)
bpy.ops.outliner.orphans_purge()

# Create a UV sphere
bpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0), radius=3)
bpy.ops.object.shade_smooth()
host = bpy.context.object
sub = host.modifiers.new('Subdivision', 'SUBSURF')
sub.levels = 2

# Create a new material
mat = bpy.data.materials.new('StarMaterial')
host.data.materials.append(mat)

mat.use_nodes = True
nodes = mat.node_tree.nodes
links = mat.node_tree.links

# Add nodes
noise = nodes.new(type='ShaderNodeTexNoise')
color_ramp = nodes.new(type='ShaderNodeValToRGB')
bsdf = nodes.get('Principled BSDF')

# Link nodes
links.new(noise.outputs['Fac'], color_ramp.inputs['Fac'])
links.new(color_ramp.outputs['Color'], bsdf.inputs['Base Color'])

# Adjusting values for starspots
bsdf.inputs['IOR'].default_value = 1
bsdf.inputs['Roughness'].default_value = 1
bsdf.inputs['Metallic'].default_value = 0.5
color_ramp.color_ramp.elements[0].position = 0.15
color_ramp.color_ramp.elements[1].color = SURFACE_COLOR
pin1 = color_ramp.color_ramp.elements.new(position=0.6)
pin2 = color_ramp.color_ramp.elements.new(position=0.4)

# Add a camera
bpy.ops.object.camera_add(location=(0, -20, 0))
camera = bpy.context.object
camera.rotation_euler = (1.5708, 0, 0)  # Rotate 90 degrees to face the object
bpy.context.scene.camera = camera

# Add a light source
bpy.ops.object.light_add(type='POINT', location=(0, -13, 0))
light = bpy.context.object
light.data.energy = 12000

# Set the render settings
output_path = f"/home/salvatore/Scrivania/lexarchive/resources/img/{file_id}.png"
bpy.context.scene.render.filepath = output_path
bpy.context.scene.render.image_settings.file_format = 'PNG'
bpy.context.scene.render.resolution_x = 1920  # Set the resolution you need
bpy.context.scene.render.resolution_y = 1080

# Render the image
bpy.ops.render.render(write_still=True)
