import bpy
import sys
import math
import mathutils
import random

argv = sys.argv

if '--' not in argv:
    raise ValueError('Error: invalid syntax.')

split_index = argv.index('--')
argv = argv[split_index + 1:]

if '--' not in argv:
    raise ValueError('Error: missing file id.')

split_index = argv.index('--')
color_arg = argv[:split_index]
file_id = argv[split_index + 1]

SURFACE_COLOR = [float(val) for val in color_arg]

# Clear existing objects
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)
bpy.ops.outliner.orphans_purge()

# Create a UV sphere
bpy.ops.mesh.primitive_uv_sphere_add(location=(0, 0, 0), radius=3)
bpy.ops.object.shade_smooth()
host = bpy.context.object
sub = host.modifiers.new('Subdivision', 'SUBSURF')
sub.levels = 2

# Create a new material
mat = bpy.data.materials.new('StarMaterial')
host.data.materials.append(mat)

mat.use_nodes = True
nodes = mat.node_tree.nodes
links = mat.node_tree.links

star_ramp = nodes.new(type='ShaderNodeValToRGB')
corona_ramp = nodes.new(type='ShaderNodeValToRGB')
noise = nodes.new(type='ShaderNodeTexNoise')
fresnel = nodes.new(type='ShaderNodeFresnel')
vec = nodes.new(type='ShaderNodeVectorMath')
bsdf = nodes.get('Principled BSDF')

links.new(noise.outputs['Fac'], star_ramp.inputs['Fac'])
links.new(fresnel.outputs['Fac'], corona_ramp.inputs['Fac'])
links.new(star_ramp.outputs['Color'], vec.inputs[0])
links.new(corona_ramp.outputs['Color'], vec.inputs[1])
links.new(vec.outputs[0], bsdf.inputs['Emission Color'])

bsdf.inputs[27].default_value = 10
star_ramp.color_ramp.elements[1].color = SURFACE_COLOR
star_ramp.color_ramp.elements[0].position = 0.3
star_ramp.color_ramp.elements[1].position = 0.85
noise.inputs['Scale'].default_value = 30
noise.inputs['Distortion'].default_value = random.randint(900, 1200) / 100
corona_ramp.color_ramp.elements[1].color = SURFACE_COLOR
corona_ramp.color_ramp.elements[0].position = 0.3
corona_ramp.color_ramp.elements[1].position = 0.85

# setting background
world = bpy.context.scene.world
world.use_nodes = True
wnodes = world.node_tree.nodes
wlinks = world.node_tree.links
wnodes.clear()

ramp = wnodes.new(type='ShaderNodeValToRGB')
noise = wnodes.new(type='ShaderNodeTexNoise')
background = wnodes.new(type='ShaderNodeBackground')
output = wnodes.new(type='ShaderNodeOutputWorld')
wlinks.new(noise.outputs['Fac'], ramp.inputs['Fac'])
wlinks.new(ramp.outputs['Color'], background.inputs['Color'])
wlinks.new(background.outputs['Background'], output.inputs['Surface'])

noise.inputs['Scale'].default_value = 600
ramp.color_ramp.elements[0].position = 0.680
ramp.color_ramp.elements[1].position = 0.850

bpy.context.scene.render.engine = 'BLENDER_EEVEE'
bpy.context.scene.eevee.use_bloom = True
bpy.context.scene.eevee.use_ssr = True

# Add a camera and place it in a random point of its orbit around the star
bpy.ops.object.camera_add()
camera = bpy.context.object
camera_orbit = 20

angle = random.uniform(0, 2 * math.pi)
x = camera_orbit * math.cos(angle)
y = camera_orbit * math.sin(angle)
z = 0
camera.location = (x, y, z)

direction = mathutils.Vector((0, 0, 0,)) - camera.location
rot_quat = direction.to_track_quat('-Z', 'Y')
camera.rotation_euler = rot_quat.to_euler()

bpy.context.scene.camera = camera

output_path = f"/home/salvatore/Scrivania/lexarchive/resources/img/{file_id}.png"
bpy.context.scene.render.filepath = output_path
bpy.context.scene.render.image_settings.file_format = 'PNG'
bpy.context.scene.render.resolution_x = 1920  # Set the resolution you need
bpy.context.scene.render.resolution_y = 1080

# Render the image
bpy.ops.render.render(write_still=True)